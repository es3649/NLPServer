package com.studmane.nlpserver.service.discourse;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;
import com.studmane.nlpserver.Server;

class WordLattice {
    private String root;
    private Map<String, LatticeNode> lattice;

    private static final String LATTICE_LOC = "./libs/lattices/";

    private WordLattice(String latticeData) {}

    /**
     * Generates a WordLattice from json contained in a file
     * @param filename the name of the file with the lattice
     * @return the WordLattice instance described in the file
     */
    public static WordLattice fromFile(String filename) 
            throws IOException {
        // read teh bytes from the file
        File file = new File(LATTICE_LOC + filename);
        String json = new String(Files.readAllBytes(file.toPath()));

        // prepare the deserializer
        // Gson gson = new Gson();
        // TypeToken<WordLattice> typTok = new TypeToken<WordLattice>() {};
        
        // // deserialize the json into a WordLattice
        // WordLattice wl = gson.fromJson(json, typeTok.getType());
        WordLattice wl = new WordLattice(json);

        // normalize the weights in the lattice
        wl.normalize();
        return wl;
    }

    /**
     * Use randomness to traverse the lattice and build text
     * 
     * It takes a couple parameters so that it can encode relevant information
     * and act personable
     * @param date the date of the appointment
     * @param name the name of the person
     * @return a sentence generated by traversing the lattice, then performing
     *      appropriate formatting using the given name and date
     */
    public String generate(Calendar date, String name) {
        assert false;
        return null;
    }

    /**
     * Normailzes the weights in the w members of each LatticeNode.
     * the weights will sum to 1 afterward 
     * (up to floating point arithmetic error)
     */
    private void normalize() {
        assert 1 == 0;
    }

    /**
     * Lattice node is a node in a WordLattice Digraph.
     * 
     * The field names are shortened so that they are more manageable 
     * to write in json, as most of these json files will have to be 
     * created manually
     */
    class LatticeNode {
        String v;           // the string value in this node
        List<String> to;    // the nodes to which this node can transition
        List<Float> w;      // the weights on those transitions
    }
}